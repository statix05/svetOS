# ~/.makepkg.conf — tuned for Ryzen 5 5600G (Zen 3), Arch Linux
# Профиль: GCC + LLD, LTO включён (через OPTIONS), кэширование: ccache/sccache

# Архитектура/тулчейн
CARCH="x86_64"
CHOST="x86_64-pc-linux-gnu"

# Флаги компиляции (безопасная оптимизация с акцентом на стабильность)
# -O2: надёжно; -O3 может ломать/замедлять в реальных проектах
# -march/-mtune: под ваш CPU (znver3)
# -fno-plt, -fstack-*: сниж. оверхед вызовов, защита стека
# -fcf-protection=full и _FORTIFY_SOURCE=3 — хардненг (минимальная цена, хорошая надёжность)
CPPFLAGS="-D_FORTIFY_SOURCE=3"
CFLAGS="-march=znver3 -mtune=znver3 -O2 -pipe -fno-plt -fexceptions -fstack-protector-strong -fstack-clash-protection -fcf-protection=full"
CXXFLAGS="${CFLAGS}"

# Линковка: lld даёт лучший баланс скорости/совместимости, чем mold
LDFLAGS="-Wl,-O2,--as-needed,-z,relro,-z,now -Wl,--sort-common -fuse-ld=lld"
# На всякий случай, если сборочная система зовёт ld напрямую:
LD=ld.lld

# Параллельность: 12 потоков для 5600G
# (автоматически подставит текущее число потоков на любой машине)
_nproc="$(nproc)"
MAKEFLAGS="-j${_proc:=${_nproc}} -l${_proc}"

# Ninja (многие проекты используют ninja)
NINJAFLAGS="-j${_proc}"

# Rust: тонкое LTO + минимизация оверхеда компиляции, target под ваш CPU
# codegen-units=1 ускоряет рантайм, но немного замедляет сборку — оставляю включённым
RUSTFLAGS="-C target-cpu=znver3 -C opt-level=3 -C codegen-units=1 -C lto=thin -C debuginfo=0 -C strip=symbols -C link-arg=-fuse-ld=lld"
CARGO_BUILD_JOBS="${_proc}"
# sccache для Rust
export RUSTC_WRAPPER="sccache"
export SCCACHE_DIR="$HOME/.cache/sccache"

# Go: PIE, trimpath; без агрессивных линки-флагов (совместимость)
GOFLAGS="-buildmode=pie -trimpath -mod=readonly -modcacherw"

# C/C++ кэш: ccache
export CCACHE_DIR="$HOME/.cache/ccache"
export CCACHE_COMPRESS=1
export CCACHE_MAXSIZE="20G"

# Включаем окружение сборки
# !check по умолчанию — тесты часто ломаются из-за зависимостей; включайте по пакету при нужде
BUILDENV=(color ccache !check !sign)

# Опции makepkg
# lto здесь — централизовано, чтобы PKGBUILD мог точечно отключать (!lto), когда ломается
OPTIONS=(strip docs !libtool !staticlibs emptydirs !zipman purge !debug lto)

# Интегрити-чек
INTEGRITY_CHECK=(sha256)

# Куда складывать всё (быстрое деревце путей)
# Сборка: на NVMe (корень) — /var/tmp
# Кэши/результаты: в домашней (RAID0) — большой объём и высокая пропускная
BUILDDIR="/var/tmp/makepkg"
PKGDEST="$HOME/.cache/makepkg/pkg"
SRCDEST="$HOME/.cache/makepkg/src"
SRCPKGDEST="$HOME/.cache/makepkg/srcpkg"
LOGDEST="$HOME/.cache/makepkg/logs"

# Пакетный формат/сжатие
PKGEXT='.pkg.tar.zst'
SRCEXT='.src.tar.zst'
COMPRESSZST=(zstd -c -z -q -T0 -19)

# Пакетировщик (замените на свои данные)
# PACKAGER="Statix <email@example.org>"
# GPGKEY=""

# Опциональные профили по переключателю окружения:
# 1) CLANG вместо GCC (в целом совместимо, но иногда проекты падают)
if [[ -n "$USE_CLANG" ]]; then
  CC=clang
  CXX=clang++
  # llvm-инструменты необязательны; включайте при желании:
  # AR=llvm-ar; NM=llvm-nm; RANLIB=llvm-ranlib; STRIP=llvm-strip
  # lld уже выбран выше
fi

# 2) MOLD как линкер (самый быстрый, но иногда несовместим)
if [[ -n "$USE_MOLD" ]] && command -v mold >/dev/null 2>&1; then
  LD=mold
  LDFLAGS="${LDFLAGS/-fuse-ld=lld/-fuse-ld=mold}"
fi

# Чтобы makepkg проверял наличие клиентов VCS:
VCSCLIENTS=('git' 'svn' 'hg' 'bzr')

DLAGENTS=(
  'file::/usr/bin/curl -qgC - --retry 3 --retry-delay 3 -o %o %u'
  'ftp::/usr/bin/curl -qgfC - --retry 3 --retry-delay 3 -o %o %u'
  'http::/usr/bin/curl -qgb "" -fLC - --retry 3 --retry-delay 3 -o %o %u'
  'https::/usr/bin/curl -qgb "" -fLC - --retry 3 --retry-delay 3 -o %o %u'
  'rsync::/usr/bin/rsync --no-motd -z %u %o'
  'scp::/usr/bin/scp -C %u %o'

  'git::/usr/bin/git clone --mirror %u %o'
  'git+http::/usr/bin/git clone --mirror %u %o'
  'git+https::/usr/bin/git clone --mirror %u %o'
  'git+ssh::/usr/bin/git clone --mirror %u %o'
  'git+file::/usr/bin/git clone --mirror %u %o'

  'bzr::/usr/bin/bzr branch %u %o'
  'bzr+http::/usr/bin/bzr branch %u %o'
  'bzr+https::/usr/bin/bzr branch %u %o'
  'bzr+ssh::/usr/bin/bzr branch %u %o'

  'hg::/usr/bin/hg clone %u %o'
  'hg+http::/usr/bin/hg clone %u %o'
  'hg+https::/usr/bin/hg clone %u %o'

  'svn::/usr/bin/svn checkout %u %o'
)